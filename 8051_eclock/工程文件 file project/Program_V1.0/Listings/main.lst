C51 COMPILER V9.60.0.0   MAIN                                                              06/20/2022 13:51:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\KEILC51u5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ma
                    -in.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC8.H>
   2          #include "intrins.h"
   3          #include "delay.h"
   4          #include "3231.h"
   5          #include "TM1637.h"
   6          #include "key.h"
   7          
   8          u8 const num[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7f,0x6F};
   9          u8 sec_dot=0,cp=0,light=3;
  10          bit light_con=0,TM0_flag=0;//×Ô¶¯ÁÁ¶È¿ØÖÆ
  11            
  12          void get_Temperature();  //ÎÂ¶È»ñÈ¡ ÏÔÊ¾
  13          void Timer0Init(void)   //5ºÁÃë@11.0592MHz
  14          {
  15   1        AUXR |= 0x80;   //¶¨Ê±Æ÷Ê±ÖÓ1TÄ£Ê½
  16   1        TMOD &= 0xF0;   //ÉèÖÃ¶¨Ê±Æ÷Ä£Ê½
  17   1        TL0 = 0x00;   //ÉèÖÃ¶¨Ê±³õÊ¼Öµ
  18   1        TH0 = 0x28;   //ÉèÖÃ¶¨Ê±³õÊ¼Öµ
  19   1        TF0 = 0;    //Çå³ýTF0±êÖ¾
  20   1        TR0 = 1;    //¶¨Ê±Æ÷0¿ªÊ¼¼ÆÊ±
  21   1        ET0 = 1;
  22   1        EA = 1;
  23   1      }
  24          
  25          void main()
  26          {
  27   1        P1M0 = 0x30;//¿ªÂ©
  28   1        P1M1 = 0x30;
  29   1        P3M1 = 0x00;//×¼Ë«Ïò
  30   1        P3M0 = 0x00;
  31   1        Timer0Init();
  32   1        while(cp<=20);cp = 0;//µÈ´ý¹©µçÎÈ¶¨
  33   1      //  ModifyTime(DS3231_SECOND,30);_nop_();//²âÊÔÓÃ
  34   1      //  ModifyTime(DS3231_MINUTE,8);_nop_();
  35   1      //  ModifyTime(DS3231_HOUR,22);_nop_();
  36   1      //  ModifyTime(DS3231_YEAR,22);_nop_();
  37   1      //  ModifyTime(DS3231_MONTH,1);_nop_();
  38   1      //  ModifyTime(DS3231_DAY,15);_nop_();
  39   1      //  ModifyTime(DS3231_WEEK,7);_nop_();
  40   1        while(1)
  41   1        {
  42   2          Key_Set();
  43   2          Key_Change();
  44   2          Key_Enter();  
  45   2          if(cp ==70)//Ã¿´óÔ¼300ms¶ÁÒ»´ÎÊ±¼ä
  46   2          {
  47   3            cp = 0;
  48   3            year = read_random(DS3231_YEAR);_nop_();
  49   3            mon  = read_random(DS3231_MONTH);_nop_();
  50   3            day  = read_random(DS3231_DAY);_nop_();
  51   3            hour = read_random(DS3231_HOUR);_nop_();
  52   3            min  = read_random(DS3231_MINUTE);_nop_();
  53   3            sec  = read_random(DS3231_SECOND);_nop_();
  54   3            week = read_random(DS3231_WEEK);_nop_();
C51 COMPILER V9.60.0.0   MAIN                                                              06/20/2022 13:51:05 PAGE 2   

  55   3            if(light_con == 0)
  56   3            {
  57   4              if((hour >= 6)&&(hour < 23))light = 5;//23-6µãµÍÁÁ¶È£¬6-23µã¸ßÁÁ¶È
  58   4              else light = 1;
  59   4              light_con = 1;
  60   4            }
  61   3            else if((!min)&&(hour == 6 || hour == 23))light_con = 0;
  62   3            if(sec%2)sec_dot=0x80;else sec_dot=0;//Ð¡ÊýµãÃëÉÁË¸   
  63   3          } 
  64   2          if(TM0_flag)
  65   2          {
  66   3            if(mode == 0)//Õý³£½çÃæ
  67   3            { 
  68   4              if(dis_temp == 1)get_Temperature();
  69   4              else
  70   4              {
  71   5                if(dis_time == 0)display_4seg(num[hour/10],num[hour%10]|sec_dot,num[min/10]|sec_dot,num[min%10],light
             -);   //ÏÔÊ¾Ê±·Ö
  72   5                if(dis_time == 1)display_4seg(num[mon/10],num[mon%10]|0x80,num[day/10],num[day%10],light);  //ÏÔÊ¾ÔÂÈÕ
  73   5              }                       
  74   4            }
  75   3            if(mode == 1)//ÉèÖÃ½çÃæ
  76   3            {
  77   4              if(temp){temp = 0;hour_t = hour;min_t = min;sec_t = sec;mon_t = mon;day_t = day;}//Ã¿½øÈëÉèÖÃ½çÃæ¶ÁÈ¡µ
             -±Ç°Ê±¼ä
  78   4              if(dis_format == 1)display_4seg(num[hour_t/10],num[hour_t%10],0x08,0x08,light);      //Ê±µ÷Õû½çÃæ
  79   4              if(dis_format == 2)display_4seg(0x08,0x08,num[min_t/10],num[min_t%10],light);        //·Öµ÷Õû½çÃæ
  80   4              if(dis_format == 3)display_4seg(num[mon_t/10],num[mon_t%10],0x08,0x08,light);        //ÔÂµ÷Õû½çÃæ
  81   4              if(dis_format == 4)display_4seg(0x08,0x08,num[day_t/10],num[day_t%10],light);        //ÈÕµ÷Õû½çÃæ
  82   4            }
  83   3          }
  84   2        }
  85   1      }
  86          
  87          void TM0_Isr() interrupt 1
  88          {
  89   1        cp++;
  90   1        TM0_flag = ~TM0_flag;
  91   1      }
  92          
  93          void get_Temperature()   //ÎÂ¶È»ñÈ¡ ÏÔÊ¾
  94          {
  95   1        uchar Tem_L; 
  96   1        uchar Tem_H;
  97   1        
  98   1        Tem_H=read_randomTmp(DS3231_TEMPERATUREH);    //ÎÂ¶È ¸ß×Ö½Ú ÕûÊý²¿·Ö
  99   1        Tem_L=read_randomTmp(DS3231_TEMPERATUREL);   //ÎÂ¶È µÍ×Ö½Ú Ð¡Êý²¿·Ö
 100   1        Tem_L = (Tem_L>>6)*0.25*100;   
 101   1        
 102   1        if(!(Tem_H & 0x80)) //ÕýÎÂ¶È
 103   1        { 
 104   2          /********ÏÔÊ¾ÎÂ¶È*********/
 105   2          if(Tem_H/10 > 0)
 106   2            display_1seg(num[Tem_H/10],0,light);//ÏÔÊ¾ÎÂ¶ÈÊ®Î»
 107   2          else
 108   2            display_1seg(0x00,0,light);//·ñÔòÎÂ¶ÈÊ®Î»Îª0²»ÏÔÊ¾
 109   2            display_1seg(num[Tem_H%10]|0x80,1,light);//ÏÔÊ¾ÎÂ¶È¸öÎ»£¬ÏÔÊ¾Ð¡Êýµã
 110   2            display_1seg(num[Tem_L/10],2,light);//ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ1Î»
 111   2            display_1seg(num[Tem_L%10],3,light);//ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ2Î»
 112   2        }
 113   1        else
 114   1        { 
C51 COMPILER V9.60.0.0   MAIN                                                              06/20/2022 13:51:05 PAGE 3   

 115   2          if(Tem_H & 0x80)   //¸ºÎÂ¶È
 116   2          {
 117   3            display_4seg(0x08,0x08,0x08,0x08,light);
 118   3          }
 119   2        }
 120   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    704    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
