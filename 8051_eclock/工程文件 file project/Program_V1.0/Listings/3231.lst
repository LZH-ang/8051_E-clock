C51 COMPILER V9.60.0.0   3231                                                              06/20/2022 13:51:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE 3231
OBJECT MODULE PLACED IN .\Objects\3231.obj
COMPILER INVOKED BY: D:\KEILC51u5\C51\BIN\C51.EXE 3231.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\32
                    -31.lst) TABS(2) OBJECT(.\Objects\3231.obj)

line level    source

   1          
   2          #include "3231.h"
   3          #include "delay.h"
   4          #include "intrins.h"
   5          
   6          uchar hour,min,sec,year,mon,day,week;
   7          bit ack;    //Ó¦´ð±êÖ¾Î»
   8          
   9          /**********************************************
  10          //IIC Start
  11          **********************************************/
  12          void IIC_Start()
  13          {
  14   1        SCL = 1;    
  15   1        SDA = 1;
  16   1        SDA = 0;
  17   1        _nop_();
  18   1        SCL = 0;
  19   1      }
  20          
  21          /**********************************************
  22          //IIC Stop
  23          **********************************************/
  24          void IIC_Stop()
  25          {
  26   1        SCL = 1;
  27   1        SDA = 0;
  28   1        SDA = 1;
  29   1      }
  30          
  31          /********************************************************************************************************
  32          **  3231
  33          ********************************************************************************************************/
  34          uchar BCD2HEX(uchar val)
  35          {
  36   1        return  ((val>>4)*10)+(val&0x0f);
  37   1      }
  38          
  39          uchar HEX2BCD(uchar val)
  40          {
  41   1        return  (((val%100)/10)<<4)|(val%10);
  42   1      }
  43          
  44          
  45          void SendByte(uchar c)
  46          {
  47   1        uchar BitCnt;
  48   1        SCL=0;
  49   1        for(BitCnt=0;BitCnt<8;BitCnt++)         //Òª´«ËÍµÄÊý¾Ý³¤¶ÈÎª8Î»
  50   1        {
  51   2          if((c<<BitCnt)&0x80)
  52   2            SDA=1;                          //ÅÐ¶Ï·¢ËÍÎ»
  53   2          else 
  54   2            SDA=0; 
C51 COMPILER V9.60.0.0   3231                                                              06/20/2022 13:51:06 PAGE 2   

  55   2          _nop_();
  56   2          SCL=1;                            //ÖÃÊ±ÖÓÏßÎª¸ß£¬Í¨Öª±»¿ØÆ÷¿ªÊ¼½ÓÊÕÊý¾ÝÎ»
  57   2          Delay5us();                       //±£Ö¤Ê±ÖÓ¸ßµçÆ½ÖÜÆÚ´óÓÚ4¦Ìs   
  58   2          SCL=0;
  59   2        }
  60   1        SDA=1;                                  //8Î»·¢ËÍÍêºóÊÍ·ÅÊý¾ÝÏß£¬×¼±¸½ÓÊÕÓ¦´ðÎ»
  61   1        _nop_();
  62   1        SCL=1;
  63   1        Delay5us();
  64   1        if(SDA==1)
  65   1            ack=0;    
  66   1        else
  67   1            ack=1;                              //ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Ó¦´ðÐÅºÅ
  68   1        SCL=0;
  69   1        Delay5us();
  70   1      }    
  71          
  72          uchar RcvByte()
  73          {
  74   1        uchar retc;
  75   1        uchar BitCnt;
  76   1      
  77   1        retc=0;
  78   1        SDA=1;                           //ÖÃÊý¾ÝÏßÎªÊäÈë·½Ê½
  79   1        for(BitCnt=0;BitCnt<8;BitCnt++)
  80   1        {
  81   2          SCL=0;                      //ÖÃÊ±ÖÓÏßÎªµÍ£¬×¼±¸½ÓÊÕÊý¾ÝÎ»       
  82   2          Delay5us();                 //Ê±ÖÓµÍµçÆ½ÖÜÆÚ´óÓÚ4.7¦Ìs           
  83   2          SCL=1;                      //ÖÃÊ±ÖÓÏßÎª¸ßÊ¹Êý¾ÝÏßÉÏÊý¾ÝÓÐÐ§
  84   2          Delay5us();
  85   2          retc=retc<<1;
  86   2          if(SDA==1)
  87   2              retc=retc+1;            //¶ÁÊý¾ÝÎ»,½ÓÊÕµÄÊý¾ÝÎ»·ÅÈëretcÖÐ
  88   2          Delay5us();
  89   2        }
  90   1        SCL=0;
  91   1        return(retc);
  92   1      }         
  93           
  94          void Ack_I2C(bit a)
  95          {
  96   1        SDA = a;  
  97   1        SCL=1;          
  98   1        Delay5us();             //Ê±ÖÓµÍµçÆ½ÖÜÆÚ´óÓÚ4us    
  99   1        SCL=0;                  //ÇåÊ±ÖÓÏß£¬Ç¯×¡I2C×ÜÏßÒÔ±ã¼ÌÐø½ÓÊÕ
 100   1        Delay5us();   
 101   1      }             
 102          
 103          uchar write_byte(uchar addr, uchar write_data)
 104          {
 105   1        IIC_Start();
 106   1        SendByte(DS3231_WriteAddress);
 107   1        if (ack == 0)
 108   1            return 0;
 109   1       
 110   1        SendByte(addr);   
 111   1        if (ack == 0)
 112   1            return 0;
 113   1       
 114   1        SendByte(write_data);
 115   1        if (ack == 0)
 116   1            return 0;
C51 COMPILER V9.60.0.0   3231                                                              06/20/2022 13:51:06 PAGE 3   

 117   1       
 118   1        IIC_Stop();
 119   1        Delay5us();      
 120   1        Delay5us();      
 121   1        return 1;
 122   1      }           
 123          
 124          uchar read_current()
 125          {
 126   1        uchar read_data;
 127   1        IIC_Start();
 128   1        SendByte(DS3231_ReadAddress);
 129   1        if(ack==0)
 130   1           return(0);       
 131   1        read_data = RcvByte();
 132   1        Ack_I2C(1);
 133   1        IIC_Stop();
 134   1        return read_data;
 135   1      }            
 136          
 137          uchar read_random(uchar random_addr)
 138          {
 139   1        uchar Tmp;
 140   1        IIC_Start();
 141   1        SendByte(DS3231_WriteAddress);
 142   1        if(ack==0)
 143   1            return(0);      
 144   1        SendByte(random_addr);
 145   1        if(ack==0)
 146   1            return(0);
 147   1        Tmp=read_current();
 148   1        if(random_addr==DS3231_HOUR) 
 149   1        Tmp&=0x3f;
 150   1                  
 151   1        return(BCD2HEX(Tmp));//¶¼×ª10½øÖÆÊä³ö
 152   1      }
 153          
 154          /***********************/
 155          uchar read_randomTmp(uchar random_addr)  //Õâ¸öÊÇ¶ÁÎÂ¶Èº¯Êý
 156          {
 157   1        uchar Tmp;
 158   1        write_byte(0x0e,0x20);//0x0e¼Ä´æÆ÷µÄCONVÎ»ÖÃ1¿ªÆôÎÂ¶È×ª»»£¬ÒªÕâ¾ä£¬ÎÂ¶ÈÊµÊ±Ë¢ÐÂ£¬Õâ¾ä²»Òª£¬ÎÂ¶ÈÒª64s²ÅË¢Ð
             -Â1´Î
 159   1        IIC_Start();
 160   1        SendByte(DS3231_WriteAddress);
 161   1        if(ack==0)
 162   1            return(0);      
 163   1        SendByte(random_addr);
 164   1        if(ack==0)
 165   1            return(0);
 166   1        Tmp=read_current();
 167   1        return Tmp;
 168   1      }         
 169          
 170          void ModifyTime(uchar address,uchar num)
 171          {
 172   1        uchar temp=0;
 173   1        if(address>6 && address <0) return;
 174   1        temp=HEX2BCD(num);
 175   1        write_byte(address,temp);
 176   1      }
 177          
C51 COMPILER V9.60.0.0   3231                                                              06/20/2022 13:51:06 PAGE 4   

 178          /*********************/ 
 179          //void get_Temperature()   //ÎÂ¶È»ñÈ¡ ÏÔÊ¾
 180          //{
 181          //  uchar Tem_L; 
 182          //  uchar Tem_H;
 183          //  Tem_H=read_randomTmp(DS3231_TEMPERATUREH);    //ÎÂ¶È ¸ß×Ö½Ú ÕûÊý²¿·Ö
 184          //  Tem_L=read_randomTmp(DS3231_TEMPERATUREL);   //ÎÂ¶È µÍ×Ö½Ú Ð¡Êý²¿·Ö
 185          //  
 186          //  Tem_L = (Tem_L>>6)*0.25*100;   //
 187          //  
 188          //  if(!(Tem_H & 0x80)) //ÕýÎÂ¶È
 189          //  { 
 190          //    /********ÏÔÊ¾ÎÂ¶È*********/
 191          //    if(Tem_H/10 > 0)
 192          //      //ÏÔÊ¾ÎÂ¶ÈÊ®Î»
 193          //    else
 194          //      //·ñÔòÎÂ¶ÈÊ®Î»Îª0²»ÏÔÊ¾
 195          //      //ÏÔÊ¾ÎÂ¶È¸öÎ»
 196          //      //ÏÔÊ¾Ð¡Êýµã
 197          //      //ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ1Î»
 198          //      //ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ2Î»
 199          //  }
 200          //  else
 201          //  { 
 202          //    if(Tem_H & 0x80)   //¸ºÎÂ¶È
 203          //    {
 204          //      Tem_H =(~Tem_H)+1; //»»Ëã³ÉÊµ¼ÊÎÂ¶ÈÖµ
 205          //        /ÏÔÊ¾¡°-¡±¸ººÅ
 206          //      if(Tem_H/10 > 0)
 207          //        //ÏÔÊ¾¸ºÎÂ¶ÈÊ®Î»
 208          //      else
 209          //        //¸ºÎÂ¶ÈÊ®Î»Îª0²»ÏÔ
 210          //        //ÏÔÊ¾¸ºÎÂ¶È¸öÎ»
 211          //        //ÏÔÊ¾Ð¡Êýµã
 212          //        //ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ1Î»
 213          //        //ÏÔÊ¾ÎÂ¶ÈÐ¡ÊýµÚ2Î»
 214          //    }
 215          //  }
 216          //  //ÏÔÊ¾¡æ·ûºÅ
 217          //} 
 218          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    384    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
